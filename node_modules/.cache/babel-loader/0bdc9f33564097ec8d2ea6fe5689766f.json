{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Copyright 2012 The Obvious Corporation.\n\n/*\r\n * bufs: Buffer utilities.\r\n */\n\n/*\r\n * Module variables\r\n */\n\n/** Pool of buffers, where `bufPool[x].length === x`. */\nvar bufPool = [];\n/** Maximum length of kept temporary buffers. */\n\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\n/** Minimum exactly-representable 64-bit int. */\n\nvar MIN_EXACT_INT64 = -0x8000000000000000;\n/** Maximum exactly-representable 64-bit int. */\n\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\n/** Maximum exactly-representable 64-bit uint. */\n\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\n/**\r\n * The int value consisting just of a 1 in bit #32 (that is, one more\r\n * than the maximum 32-bit unsigned value).\r\n */\n\nvar BIT_32 = 0x100000000;\n/**\r\n * The int value consisting just of a 1 in bit #64 (that is, one more\r\n * than the maximum 64-bit unsigned value).\r\n */\n\nvar BIT_64 = 0x10000000000000000;\n/*\r\n * Helper functions\r\n */\n\n/**\r\n * Masks off all but the lowest bit set of the given number.\r\n */\n\nfunction lowestBit(num) {\n  return num & -num;\n}\n/**\r\n * Gets whether trying to add the second number to the first is lossy\r\n * (inexact). The first number is meant to be an accumulated result.\r\n */\n\n\nfunction isLossyToAdd(accum, num) {\n  if (num === 0) {\n    return false;\n  }\n\n  var lowBit = lowestBit(num);\n  var added = accum + lowBit;\n\n  if (added === accum) {\n    return true;\n  }\n\n  if (added - lowBit !== accum) {\n    return true;\n  }\n\n  return false;\n}\n/*\r\n * Exported functions\r\n */\n\n/**\r\n * Allocates a buffer of the given length, which is initialized\r\n * with all zeroes. This returns a buffer from the pool if it is\r\n * available, or a freshly-allocated buffer if not.\r\n */\n\n\nexport function alloc(length) {\n  var result = bufPool[length];\n\n  if (result) {\n    bufPool[length] = undefined;\n  } else {\n    result = new Buffer(length);\n  }\n\n  result.fill(0);\n  return result;\n}\n/**\r\n * Releases a buffer back to the pool.\r\n */\n\nexport function free(buffer) {\n  var length = buffer.length;\n\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\n    bufPool[length] = buffer;\n  }\n}\n/**\r\n * Resizes a buffer, returning a new buffer. Returns the argument if\r\n * the length wouldn't actually change. This function is only safe to\r\n * use if the given buffer was allocated within this module (since\r\n * otherwise the buffer might possibly be shared externally).\r\n */\n\nexport function resize(buffer, length) {\n  if (length === buffer.length) {\n    return buffer;\n  }\n\n  var newBuf = alloc(length);\n  buffer.copy(newBuf);\n  free(buffer);\n  return newBuf;\n}\n/**\r\n * Reads an arbitrary signed int from a buffer.\r\n */\n\nexport function readInt(buffer) {\n  var length = buffer.length;\n  var positive = buffer[length - 1] < 0x80;\n  var result = positive ? 0 : -1;\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\n  // working if the result won't fit in a 32-bit int.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (because the result has\n    // no more than 48 bits, and loss only happens with 54 or more).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i = length - 1; _i >= 0; _i--) {\n      var one = buffer[_i];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\r\n * Reads an arbitrary unsigned int from a buffer.\r\n */\n\nexport function readUInt(buffer) {\n  var length = buffer.length;\n  var result = 0;\n  var lossy = false; // Note: See above in re bit manipulation.\n\n  if (length < 7) {\n    // Common case which can't possibly be lossy (see above).\n    for (var i = length - 1; i >= 0; i--) {\n      result = result * 0x100 + buffer[i];\n    }\n  } else {\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\n      var one = buffer[_i2];\n      result *= 0x100;\n\n      if (isLossyToAdd(result, one)) {\n        lossy = true;\n      }\n\n      result += one;\n    }\n  }\n\n  return {\n    value: result,\n    lossy: lossy\n  };\n}\n/**\r\n * Writes a little-endian 64-bit signed int into a buffer.\r\n */\n\nexport function writeInt64(value, buffer) {\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  if (value < 0) {\n    value += BIT_64;\n  }\n\n  writeUInt64(value, buffer);\n}\n/**\r\n * Writes a little-endian 64-bit unsigned int into a buffer.\r\n */\n\nexport function writeUInt64(value, buffer) {\n  if (value < 0 || value > MAX_EXACT_UINT64) {\n    throw new Error(\"Value out of range.\");\n  }\n\n  var lowWord = value % BIT_32;\n  var highWord = Math.floor(value / BIT_32);\n  buffer.writeUInt32LE(lowWord, 0);\n  buffer.writeUInt32LE(highWord, 4);\n}","map":{"version":3,"names":["bufPool","TEMP_BUF_MAXIMUM_LENGTH","MIN_EXACT_INT64","MAX_EXACT_INT64","MAX_EXACT_UINT64","BIT_32","BIT_64","lowestBit","num","isLossyToAdd","accum","lowBit","added","alloc","length","result","undefined","Buffer","fill","free","buffer","resize","newBuf","copy","readInt","positive","lossy","i","_i","one","value","readUInt","_i2","writeInt64","Error","writeUInt64","lowWord","highWord","Math","floor","writeUInt32LE"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/@webassemblyjs/leb128/esm/bufs.js"],"sourcesContent":["// Copyright 2012 The Obvious Corporation.\r\n\r\n/*\r\n * bufs: Buffer utilities.\r\n */\r\n\r\n/*\r\n * Module variables\r\n */\r\n\r\n/** Pool of buffers, where `bufPool[x].length === x`. */\r\nvar bufPool = [];\r\n/** Maximum length of kept temporary buffers. */\r\n\r\nvar TEMP_BUF_MAXIMUM_LENGTH = 20;\r\n/** Minimum exactly-representable 64-bit int. */\r\n\r\nvar MIN_EXACT_INT64 = -0x8000000000000000;\r\n/** Maximum exactly-representable 64-bit int. */\r\n\r\nvar MAX_EXACT_INT64 = 0x7ffffffffffffc00;\r\n/** Maximum exactly-representable 64-bit uint. */\r\n\r\nvar MAX_EXACT_UINT64 = 0xfffffffffffff800;\r\n/**\r\n * The int value consisting just of a 1 in bit #32 (that is, one more\r\n * than the maximum 32-bit unsigned value).\r\n */\r\n\r\nvar BIT_32 = 0x100000000;\r\n/**\r\n * The int value consisting just of a 1 in bit #64 (that is, one more\r\n * than the maximum 64-bit unsigned value).\r\n */\r\n\r\nvar BIT_64 = 0x10000000000000000;\r\n/*\r\n * Helper functions\r\n */\r\n\r\n/**\r\n * Masks off all but the lowest bit set of the given number.\r\n */\r\n\r\nfunction lowestBit(num) {\r\n  return num & -num;\r\n}\r\n/**\r\n * Gets whether trying to add the second number to the first is lossy\r\n * (inexact). The first number is meant to be an accumulated result.\r\n */\r\n\r\n\r\nfunction isLossyToAdd(accum, num) {\r\n  if (num === 0) {\r\n    return false;\r\n  }\r\n\r\n  var lowBit = lowestBit(num);\r\n  var added = accum + lowBit;\r\n\r\n  if (added === accum) {\r\n    return true;\r\n  }\r\n\r\n  if (added - lowBit !== accum) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n/*\r\n * Exported functions\r\n */\r\n\r\n/**\r\n * Allocates a buffer of the given length, which is initialized\r\n * with all zeroes. This returns a buffer from the pool if it is\r\n * available, or a freshly-allocated buffer if not.\r\n */\r\n\r\n\r\nexport function alloc(length) {\r\n  var result = bufPool[length];\r\n\r\n  if (result) {\r\n    bufPool[length] = undefined;\r\n  } else {\r\n    result = new Buffer(length);\r\n  }\r\n\r\n  result.fill(0);\r\n  return result;\r\n}\r\n/**\r\n * Releases a buffer back to the pool.\r\n */\r\n\r\nexport function free(buffer) {\r\n  var length = buffer.length;\r\n\r\n  if (length < TEMP_BUF_MAXIMUM_LENGTH) {\r\n    bufPool[length] = buffer;\r\n  }\r\n}\r\n/**\r\n * Resizes a buffer, returning a new buffer. Returns the argument if\r\n * the length wouldn't actually change. This function is only safe to\r\n * use if the given buffer was allocated within this module (since\r\n * otherwise the buffer might possibly be shared externally).\r\n */\r\n\r\nexport function resize(buffer, length) {\r\n  if (length === buffer.length) {\r\n    return buffer;\r\n  }\r\n\r\n  var newBuf = alloc(length);\r\n  buffer.copy(newBuf);\r\n  free(buffer);\r\n  return newBuf;\r\n}\r\n/**\r\n * Reads an arbitrary signed int from a buffer.\r\n */\r\n\r\nexport function readInt(buffer) {\r\n  var length = buffer.length;\r\n  var positive = buffer[length - 1] < 0x80;\r\n  var result = positive ? 0 : -1;\r\n  var lossy = false; // Note: We can't use bit manipulation here, since that stops\r\n  // working if the result won't fit in a 32-bit int.\r\n\r\n  if (length < 7) {\r\n    // Common case which can't possibly be lossy (because the result has\r\n    // no more than 48 bits, and loss only happens with 54 or more).\r\n    for (var i = length - 1; i >= 0; i--) {\r\n      result = result * 0x100 + buffer[i];\r\n    }\r\n  } else {\r\n    for (var _i = length - 1; _i >= 0; _i--) {\r\n      var one = buffer[_i];\r\n      result *= 0x100;\r\n\r\n      if (isLossyToAdd(result, one)) {\r\n        lossy = true;\r\n      }\r\n\r\n      result += one;\r\n    }\r\n  }\r\n\r\n  return {\r\n    value: result,\r\n    lossy: lossy\r\n  };\r\n}\r\n/**\r\n * Reads an arbitrary unsigned int from a buffer.\r\n */\r\n\r\nexport function readUInt(buffer) {\r\n  var length = buffer.length;\r\n  var result = 0;\r\n  var lossy = false; // Note: See above in re bit manipulation.\r\n\r\n  if (length < 7) {\r\n    // Common case which can't possibly be lossy (see above).\r\n    for (var i = length - 1; i >= 0; i--) {\r\n      result = result * 0x100 + buffer[i];\r\n    }\r\n  } else {\r\n    for (var _i2 = length - 1; _i2 >= 0; _i2--) {\r\n      var one = buffer[_i2];\r\n      result *= 0x100;\r\n\r\n      if (isLossyToAdd(result, one)) {\r\n        lossy = true;\r\n      }\r\n\r\n      result += one;\r\n    }\r\n  }\r\n\r\n  return {\r\n    value: result,\r\n    lossy: lossy\r\n  };\r\n}\r\n/**\r\n * Writes a little-endian 64-bit signed int into a buffer.\r\n */\r\n\r\nexport function writeInt64(value, buffer) {\r\n  if (value < MIN_EXACT_INT64 || value > MAX_EXACT_INT64) {\r\n    throw new Error(\"Value out of range.\");\r\n  }\r\n\r\n  if (value < 0) {\r\n    value += BIT_64;\r\n  }\r\n\r\n  writeUInt64(value, buffer);\r\n}\r\n/**\r\n * Writes a little-endian 64-bit unsigned int into a buffer.\r\n */\r\n\r\nexport function writeUInt64(value, buffer) {\r\n  if (value < 0 || value > MAX_EXACT_UINT64) {\r\n    throw new Error(\"Value out of range.\");\r\n  }\r\n\r\n  var lowWord = value % BIT_32;\r\n  var highWord = Math.floor(value / BIT_32);\r\n  buffer.writeUInt32LE(lowWord, 0);\r\n  buffer.writeUInt32LE(highWord, 4);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}