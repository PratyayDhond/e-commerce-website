{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onDone,\n    rethrowIfPossible\n  }) {\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onDone,\n      rethrowIfPossible\n    });\n  }\n\n}\n\nconst factory = new SyncHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n  throw new Error(\"tapAsync is not supported on a SyncHook\");\n};\n\nconst TAP_PROMISE = () => {\n  throw new Error(\"tapPromise is not supported on a SyncHook\");\n};\n\nconst COMPILE = function (options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction SyncHook(args = [], name = undefined) {\n  const hook = new Hook(args, name);\n  hook.constructor = SyncHook;\n  hook.tapAsync = TAP_ASYNC;\n  hook.tapPromise = TAP_PROMISE;\n  hook.compile = COMPILE;\n  return hook;\n}\n\nSyncHook.prototype = null;\nmodule.exports = SyncHook;","map":{"version":3,"names":["Hook","require","HookCodeFactory","SyncHookCodeFactory","content","onError","onDone","rethrowIfPossible","callTapsSeries","i","err","factory","TAP_ASYNC","Error","TAP_PROMISE","COMPILE","options","setup","create","SyncHook","args","name","undefined","hook","constructor","tapAsync","tapPromise","compile","prototype","module","exports"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/tapable/lib/SyncHook.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\"use strict\";\r\n\r\nconst Hook = require(\"./Hook\");\r\nconst HookCodeFactory = require(\"./HookCodeFactory\");\r\n\r\nclass SyncHookCodeFactory extends HookCodeFactory {\r\n\tcontent({ onError, onDone, rethrowIfPossible }) {\r\n\t\treturn this.callTapsSeries({\r\n\t\t\tonError: (i, err) => onError(err),\r\n\t\t\tonDone,\r\n\t\t\trethrowIfPossible\r\n\t\t});\r\n\t}\r\n}\r\n\r\nconst factory = new SyncHookCodeFactory();\r\n\r\nconst TAP_ASYNC = () => {\r\n\tthrow new Error(\"tapAsync is not supported on a SyncHook\");\r\n};\r\n\r\nconst TAP_PROMISE = () => {\r\n\tthrow new Error(\"tapPromise is not supported on a SyncHook\");\r\n};\r\n\r\nconst COMPILE = function(options) {\r\n\tfactory.setup(this, options);\r\n\treturn factory.create(options);\r\n};\r\n\r\nfunction SyncHook(args = [], name = undefined) {\r\n\tconst hook = new Hook(args, name);\r\n\thook.constructor = SyncHook;\r\n\thook.tapAsync = TAP_ASYNC;\r\n\thook.tapPromise = TAP_PROMISE;\r\n\thook.compile = COMPILE;\r\n\treturn hook;\r\n}\r\n\r\nSyncHook.prototype = null;\r\n\r\nmodule.exports = SyncHook;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,mBAAN,SAAkCD,eAAlC,CAAkD;EACjDE,OAAO,CAAC;IAAEC,OAAF;IAAWC,MAAX;IAAmBC;EAAnB,CAAD,EAAyC;IAC/C,OAAO,KAAKC,cAAL,CAAoB;MAC1BH,OAAO,EAAE,CAACI,CAAD,EAAIC,GAAJ,KAAYL,OAAO,CAACK,GAAD,CADF;MAE1BJ,MAF0B;MAG1BC;IAH0B,CAApB,CAAP;EAKA;;AAPgD;;AAUlD,MAAMI,OAAO,GAAG,IAAIR,mBAAJ,EAAhB;;AAEA,MAAMS,SAAS,GAAG,MAAM;EACvB,MAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACA,CAFD;;AAIA,MAAMC,WAAW,GAAG,MAAM;EACzB,MAAM,IAAID,KAAJ,CAAU,2CAAV,CAAN;AACA,CAFD;;AAIA,MAAME,OAAO,GAAG,UAASC,OAAT,EAAkB;EACjCL,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBD,OAApB;EACA,OAAOL,OAAO,CAACO,MAAR,CAAeF,OAAf,CAAP;AACA,CAHD;;AAKA,SAASG,QAAT,CAAkBC,IAAI,GAAG,EAAzB,EAA6BC,IAAI,GAAGC,SAApC,EAA+C;EAC9C,MAAMC,IAAI,GAAG,IAAIvB,IAAJ,CAASoB,IAAT,EAAeC,IAAf,CAAb;EACAE,IAAI,CAACC,WAAL,GAAmBL,QAAnB;EACAI,IAAI,CAACE,QAAL,GAAgBb,SAAhB;EACAW,IAAI,CAACG,UAAL,GAAkBZ,WAAlB;EACAS,IAAI,CAACI,OAAL,GAAeZ,OAAf;EACA,OAAOQ,IAAP;AACA;;AAEDJ,QAAQ,CAACS,SAAT,GAAqB,IAArB;AAEAC,MAAM,CAACC,OAAP,GAAiBX,QAAjB"},"metadata":{},"sourceType":"script"}