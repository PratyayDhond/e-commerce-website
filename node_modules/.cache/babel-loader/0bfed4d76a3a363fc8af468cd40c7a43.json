{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nconst basename = require(\"./getPaths\").basename;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n\nmodule.exports = class CloneBasenamePlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\n      const filename = basename(request.path);\n      const filePath = resolver.join(request.path, filename);\n      const obj = { ...request,\n        path: filePath,\n        relativePath: request.relativePath && resolver.join(request.relativePath, filename)\n      };\n      resolver.doResolve(target, obj, \"using path: \" + filePath, resolveContext, callback);\n    });\n  }\n\n};","map":{"version":3,"names":["basename","require","module","exports","CloneBasenamePlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","filename","path","filePath","join","obj","relativePath","doResolve"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/enhanced-resolve/lib/CloneBasenamePlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst basename = require(\"./getPaths\").basename;\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n\r\nmodule.exports = class CloneBasenamePlugin {\r\n\tconstructor(source, target) {\r\n\t\tthis.source = source;\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst target = resolver.ensureHook(this.target);\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\r\n\t\t\t\tconst filename = basename(request.path);\r\n\t\t\t\tconst filePath = resolver.join(request.path, filename);\r\n\t\t\t\tconst obj = {\r\n\t\t\t\t\t...request,\r\n\t\t\t\t\tpath: filePath,\r\n\t\t\t\t\trelativePath:\r\n\t\t\t\t\t\trequest.relativePath &&\r\n\t\t\t\t\t\tresolver.join(request.relativePath, filename)\r\n\t\t\t\t};\r\n\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\ttarget,\r\n\t\t\t\t\tobj,\r\n\t\t\t\t\t\"using path: \" + filePath,\r\n\t\t\t\t\tresolveContext,\r\n\t\t\t\t\tcallback\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,QAAvC;AAEA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,mBAAN,CAA0B;EAC1CC,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACAE,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAEW,qBAFX,EAEkC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACvE,MAAMC,QAAQ,GAAGhB,QAAQ,CAACa,OAAO,CAACI,IAAT,CAAzB;MACA,MAAMC,QAAQ,GAAGT,QAAQ,CAACU,IAAT,CAAcN,OAAO,CAACI,IAAtB,EAA4BD,QAA5B,CAAjB;MACA,MAAMI,GAAG,GAAG,EACX,GAAGP,OADQ;QAEXI,IAAI,EAAEC,QAFK;QAGXG,YAAY,EACXR,OAAO,CAACQ,YAAR,IACAZ,QAAQ,CAACU,IAAT,CAAcN,OAAO,CAACQ,YAAtB,EAAoCL,QAApC;MALU,CAAZ;MAOAP,QAAQ,CAACa,SAAT,CACCf,MADD,EAECa,GAFD,EAGC,iBAAiBF,QAHlB,EAICJ,cAJD,EAKCC,QALD;IAOA,CAnBF;EAoBA;;AAhCyC,CAA3C"},"metadata":{},"sourceType":"script"}