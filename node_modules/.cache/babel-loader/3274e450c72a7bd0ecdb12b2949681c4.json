{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\n\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst path = require(\"path\");\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst {\n  processImportsField\n} = require(\"./util/entrypoints\");\n\nconst {\n  parseIdentifier\n} = require(\"./util/identifier\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\n\n/** @typedef {import(\"./util/entrypoints\").ImportsField} ImportsField */\n\n\nconst dotCode = \".\".charCodeAt(0);\nmodule.exports = class ImportsFieldPlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {Set<string>} conditionNames condition names\r\n   * @param {string | string[]} fieldNamePath name path\r\n   * @param {string | ResolveStepHook} targetFile target file\r\n   * @param {string | ResolveStepHook} targetPackage target package\r\n   */\n  constructor(source, conditionNames, fieldNamePath, targetFile, targetPackage) {\n    this.source = source;\n    this.targetFile = targetFile;\n    this.targetPackage = targetPackage;\n    this.conditionNames = conditionNames;\n    this.fieldName = fieldNamePath;\n    /** @type {WeakMap<any, FieldProcessor>} */\n\n    this.fieldProcessorCache = new WeakMap();\n  }\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n\n\n  apply(resolver) {\n    const targetFile = resolver.ensureHook(this.targetFile);\n    const targetPackage = resolver.ensureHook(this.targetPackage);\n    resolver.getHook(this.source).tapAsync(\"ImportsFieldPlugin\", (request, resolveContext, callback) => {\n      // When there is no description file, abort\n      if (!request.descriptionFilePath || request.request === undefined) {\n        return callback();\n      }\n\n      const remainingRequest = request.request + request.query + request.fragment;\n      /** @type {ImportsField|null} */\n\n      const importsField = DescriptionFileUtils.getField(request.descriptionFileData, this.fieldName);\n      if (!importsField) return callback();\n\n      if (request.directory) {\n        return callback(new Error(`Resolving to directories is not possible with the imports field (request was ${remainingRequest}/)`));\n      }\n\n      let paths;\n\n      try {\n        // We attach the cache to the description file instead of the importsField value\n        // because we use a WeakMap and the importsField could be a string too.\n        // Description file is always an object when exports field can be accessed.\n        let fieldProcessor = this.fieldProcessorCache.get(request.descriptionFileData);\n\n        if (fieldProcessor === undefined) {\n          fieldProcessor = processImportsField(importsField);\n          this.fieldProcessorCache.set(request.descriptionFileData, fieldProcessor);\n        }\n\n        paths = fieldProcessor(remainingRequest, this.conditionNames);\n      } catch (err) {\n        if (resolveContext.log) {\n          resolveContext.log(`Imports field in ${request.descriptionFilePath} can't be processed: ${err}`);\n        }\n\n        return callback(err);\n      }\n\n      if (paths.length === 0) {\n        return callback(new Error(`Package import ${remainingRequest} is not imported from package ${request.descriptionFileRoot} (see imports field in ${request.descriptionFilePath})`));\n      }\n\n      forEachBail(paths, (p, callback) => {\n        const parsedIdentifier = parseIdentifier(p);\n        if (!parsedIdentifier) return callback();\n        const [path_, query, fragment] = parsedIdentifier;\n\n        switch (path_.charCodeAt(0)) {\n          // should be relative\n          case dotCode:\n            {\n              const obj = { ...request,\n                request: undefined,\n                path: path.join(\n                /** @type {string} */\n                request.descriptionFileRoot, path_),\n                relativePath: path_,\n                query,\n                fragment\n              };\n              resolver.doResolve(targetFile, obj, \"using imports field: \" + p, resolveContext, callback);\n              break;\n            }\n          // package resolving\n\n          default:\n            {\n              const obj = { ...request,\n                request: path_,\n                relativePath: path_,\n                fullySpecified: true,\n                query,\n                fragment\n              };\n              resolver.doResolve(targetPackage, obj, \"using imports field: \" + p, resolveContext, callback);\n            }\n        }\n      }, (err, result) => callback(err, result || null));\n    });\n  }\n\n};","map":{"version":3,"names":["path","require","DescriptionFileUtils","forEachBail","processImportsField","parseIdentifier","dotCode","charCodeAt","module","exports","ImportsFieldPlugin","constructor","source","conditionNames","fieldNamePath","targetFile","targetPackage","fieldName","fieldProcessorCache","WeakMap","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","descriptionFilePath","undefined","remainingRequest","query","fragment","importsField","getField","descriptionFileData","directory","Error","paths","fieldProcessor","get","set","err","log","length","descriptionFileRoot","p","parsedIdentifier","path_","obj","join","relativePath","doResolve","fullySpecified","result"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/enhanced-resolve/lib/ImportsFieldPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst path = require(\"path\");\r\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\r\nconst forEachBail = require(\"./forEachBail\");\r\nconst { processImportsField } = require(\"./util/entrypoints\");\r\nconst { parseIdentifier } = require(\"./util/identifier\");\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n/** @typedef {import(\"./util/entrypoints\").FieldProcessor} FieldProcessor */\r\n/** @typedef {import(\"./util/entrypoints\").ImportsField} ImportsField */\r\n\r\nconst dotCode = \".\".charCodeAt(0);\r\n\r\nmodule.exports = class ImportsFieldPlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {Set<string>} conditionNames condition names\r\n\t * @param {string | string[]} fieldNamePath name path\r\n\t * @param {string | ResolveStepHook} targetFile target file\r\n\t * @param {string | ResolveStepHook} targetPackage target package\r\n\t */\r\n\tconstructor(\r\n\t\tsource,\r\n\t\tconditionNames,\r\n\t\tfieldNamePath,\r\n\t\ttargetFile,\r\n\t\ttargetPackage\r\n\t) {\r\n\t\tthis.source = source;\r\n\t\tthis.targetFile = targetFile;\r\n\t\tthis.targetPackage = targetPackage;\r\n\t\tthis.conditionNames = conditionNames;\r\n\t\tthis.fieldName = fieldNamePath;\r\n\t\t/** @type {WeakMap<any, FieldProcessor>} */\r\n\t\tthis.fieldProcessorCache = new WeakMap();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst targetFile = resolver.ensureHook(this.targetFile);\r\n\t\tconst targetPackage = resolver.ensureHook(this.targetPackage);\r\n\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\"ImportsFieldPlugin\", (request, resolveContext, callback) => {\r\n\t\t\t\t// When there is no description file, abort\r\n\t\t\t\tif (!request.descriptionFilePath || request.request === undefined) {\r\n\t\t\t\t\treturn callback();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst remainingRequest =\r\n\t\t\t\t\trequest.request + request.query + request.fragment;\r\n\t\t\t\t/** @type {ImportsField|null} */\r\n\t\t\t\tconst importsField = DescriptionFileUtils.getField(\r\n\t\t\t\t\trequest.descriptionFileData,\r\n\t\t\t\t\tthis.fieldName\r\n\t\t\t\t);\r\n\t\t\t\tif (!importsField) return callback();\r\n\r\n\t\t\t\tif (request.directory) {\r\n\t\t\t\t\treturn callback(\r\n\t\t\t\t\t\tnew Error(\r\n\t\t\t\t\t\t\t`Resolving to directories is not possible with the imports field (request was ${remainingRequest}/)`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet paths;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// We attach the cache to the description file instead of the importsField value\r\n\t\t\t\t\t// because we use a WeakMap and the importsField could be a string too.\r\n\t\t\t\t\t// Description file is always an object when exports field can be accessed.\r\n\t\t\t\t\tlet fieldProcessor = this.fieldProcessorCache.get(\r\n\t\t\t\t\t\trequest.descriptionFileData\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (fieldProcessor === undefined) {\r\n\t\t\t\t\t\tfieldProcessor = processImportsField(importsField);\r\n\t\t\t\t\t\tthis.fieldProcessorCache.set(\r\n\t\t\t\t\t\t\trequest.descriptionFileData,\r\n\t\t\t\t\t\t\tfieldProcessor\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpaths = fieldProcessor(remainingRequest, this.conditionNames);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tif (resolveContext.log) {\r\n\t\t\t\t\t\tresolveContext.log(\r\n\t\t\t\t\t\t\t`Imports field in ${request.descriptionFilePath} can't be processed: ${err}`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (paths.length === 0) {\r\n\t\t\t\t\treturn callback(\r\n\t\t\t\t\t\tnew Error(\r\n\t\t\t\t\t\t\t`Package import ${remainingRequest} is not imported from package ${request.descriptionFileRoot} (see imports field in ${request.descriptionFilePath})`\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tforEachBail(\r\n\t\t\t\t\tpaths,\r\n\t\t\t\t\t(p, callback) => {\r\n\t\t\t\t\t\tconst parsedIdentifier = parseIdentifier(p);\r\n\r\n\t\t\t\t\t\tif (!parsedIdentifier) return callback();\r\n\r\n\t\t\t\t\t\tconst [path_, query, fragment] = parsedIdentifier;\r\n\r\n\t\t\t\t\t\tswitch (path_.charCodeAt(0)) {\r\n\t\t\t\t\t\t\t// should be relative\r\n\t\t\t\t\t\t\tcase dotCode: {\r\n\t\t\t\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t\t\t\t...request,\r\n\t\t\t\t\t\t\t\t\trequest: undefined,\r\n\t\t\t\t\t\t\t\t\tpath: path.join(\r\n\t\t\t\t\t\t\t\t\t\t/** @type {string} */ (request.descriptionFileRoot),\r\n\t\t\t\t\t\t\t\t\t\tpath_\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\trelativePath: path_,\r\n\t\t\t\t\t\t\t\t\tquery,\r\n\t\t\t\t\t\t\t\t\tfragment\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\t\t\t\t\ttargetFile,\r\n\t\t\t\t\t\t\t\t\tobj,\r\n\t\t\t\t\t\t\t\t\t\"using imports field: \" + p,\r\n\t\t\t\t\t\t\t\t\tresolveContext,\r\n\t\t\t\t\t\t\t\t\tcallback\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// package resolving\r\n\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t\t\t\t...request,\r\n\t\t\t\t\t\t\t\t\trequest: path_,\r\n\t\t\t\t\t\t\t\t\trelativePath: path_,\r\n\t\t\t\t\t\t\t\t\tfullySpecified: true,\r\n\t\t\t\t\t\t\t\t\tquery,\r\n\t\t\t\t\t\t\t\t\tfragment\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\t\t\t\t\ttargetPackage,\r\n\t\t\t\t\t\t\t\t\tobj,\r\n\t\t\t\t\t\t\t\t\t\"using imports field: \" + p,\r\n\t\t\t\t\t\t\t\t\tresolveContext,\r\n\t\t\t\t\t\t\t\t\tcallback\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(err, result) => callback(err, result || null)\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}