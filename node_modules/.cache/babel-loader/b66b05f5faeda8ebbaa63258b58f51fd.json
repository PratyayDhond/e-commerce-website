{"ast":null,"code":"require(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nmodule.exports = Long;\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\n\nvar wasm = null;\n\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n} catch (e) {// no wasm support :(\n}\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\n\n\nfunction Long(low, high, unsigned) {\n  /**\r\n   * The low 32 bits as a signed value.\r\n   * @type {number}\r\n   */\n  this.low = low | 0;\n  /**\r\n   * The high 32 bits as a signed value.\r\n   * @type {number}\r\n   */\n\n  this.high = high | 0;\n  /**\r\n   * Whether unsigned or not.\r\n   * @type {boolean}\r\n   */\n\n  this.unsigned = !!unsigned;\n} // The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\n\n\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", {\n  value: true\n});\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\n\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\n\n\nLong.isLong = isLong;\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\n\nvar INT_CACHE = {};\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\n\nvar UINT_CACHE = {};\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\n\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n\n  if (unsigned) {\n    value >>>= 0;\n\n    if (cache = 0 <= value && value < 256) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n\n    obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n    if (cache) UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n\n    if (cache = -128 <= value && value < 128) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj) return cachedObj;\n    }\n\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache) INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\n\n\nLong.fromInt = fromInt;\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\n\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value)) return unsigned ? UZERO : ZERO;\n\n  if (unsigned) {\n    if (value < 0) return UZERO;\n    if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n  }\n\n  if (value < 0) return fromNumber(-value, unsigned).neg();\n  return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n}\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\n\n\nLong.fromNumber = fromNumber;\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\n\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\n\n\nLong.fromBits = fromBits;\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\n\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\n\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0) throw Error('empty string');\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return ZERO;\n\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned, unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError('radix');\n  var p;\n  if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  } // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n  var result = ZERO;\n\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n\n  result.unsigned = unsigned;\n  return result;\n}\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\n\n\nLong.fromString = fromString;\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\n\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number') return fromNumber(val, unsigned);\n  if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\n\n\nLong.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\n\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\n\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\n\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\n\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\n\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\n\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar ZERO = fromInt(0);\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\n\nLong.ZERO = ZERO;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar UZERO = fromInt(0, true);\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\n\nLong.UZERO = UZERO;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar ONE = fromInt(1);\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\n\nLong.ONE = ONE;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar UONE = fromInt(1, true);\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\n\nLong.UONE = UONE;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar NEG_ONE = fromInt(-1);\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\n\nLong.NEG_ONE = NEG_ONE;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\n\nLong.MAX_VALUE = MAX_VALUE;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\n\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\n\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\n\nLong.MIN_VALUE = MIN_VALUE;\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\n\nvar LongPrototype = Long.prototype;\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @this {!Long}\r\n * @returns {number}\r\n */\n\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @this {!Long}\r\n * @returns {number}\r\n */\n\n\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @this {!Long}\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\n\n\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix) throw RangeError('radix');\n  if (this.isZero()) return '0';\n\n  if (this.isNegative()) {\n    // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else return '-' + this.neg().toString(radix);\n  } // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n\n\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n      rem = this;\n  var result = '';\n\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n        digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero()) return digits + result;else {\n      while (digits.length < 6) digits = '0' + digits;\n\n      result = '' + digits + result;\n    }\n  }\n};\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @this {!Long}\r\n * @returns {number} Signed high bits\r\n */\n\n\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @this {!Long}\r\n * @returns {number} Unsigned high bits\r\n */\n\n\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @this {!Long}\r\n * @returns {number} Signed low bits\r\n */\n\n\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @this {!Long}\r\n * @returns {number} Unsigned low bits\r\n */\n\n\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @this {!Long}\r\n * @returns {number}\r\n */\n\n\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n\n  for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n/**\r\n * Tests if this Long's value equals zero.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.eqz = LongPrototype.isZero;\n/**\r\n * Tests if this Long's value is negative.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\n\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n/**\r\n * Tests if this Long's value is positive.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n/**\r\n * Tests if this Long's value is odd.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n/**\r\n * Tests if this Long's value is even.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n  return this.high === other.high && this.low === other.low;\n};\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.eq = LongPrototype.equals;\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(\n  /* validates */\n  other);\n};\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.neq = LongPrototype.notEquals;\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.ne = LongPrototype.notEquals;\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(\n  /* validates */\n  other) < 0;\n};\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.lt = LongPrototype.lessThan;\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(\n  /* validates */\n  other) <= 0;\n};\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(\n  /* validates */\n  other) > 0;\n};\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.gt = LongPrototype.greaterThan;\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(\n  /* validates */\n  other) >= 0;\n};\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\n\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\n\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\r\n * Compares this Long's value with the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\n\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other)) other = fromValue(other);\n  if (this.eq(other)) return 0;\n  var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) return -1;\n  if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n\n  if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n\n  return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n};\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\n\n\nLongPrototype.comp = LongPrototype.compare;\n/**\r\n * Negates this Long's value.\r\n * @this {!Long}\r\n * @returns {!Long} Negated Long\r\n */\n\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n  return this.not().add(ONE);\n};\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\n\n\nLongPrototype.neg = LongPrototype.negate;\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @this {!Long}\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\n\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n  var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n};\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @this {!Long}\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\n\n\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\n\n\nLongPrototype.sub = LongPrototype.subtract;\n/**\r\n * Returns the product of this and the specified Long.\r\n * @this {!Long}\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\n\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero()) return ZERO;\n  if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero()) return ZERO;\n  if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n\n\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n  var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n};\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\n\n\nLongPrototype.mul = LongPrototype.multiply;\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @this {!Long}\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\n\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor);\n  if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE)) return ONE;else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n\n    if (this.isNegative()) {\n      if (divisor.isNegative()) return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned) divisor = divisor.toUnsigned();\n    if (divisor.gt(this)) return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  } // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n\n\n  rem = this;\n\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n        // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    approxRes = fromNumber(approx),\n        approxRem = approxRes.mul(divisor);\n\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    } // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n\n\n    if (approxRes.isZero()) approxRes = ONE;\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n\n  return res;\n};\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\n\n\nLongPrototype.div = LongPrototype.divide;\n/**\r\n * Returns this Long modulo the specified.\r\n * @this {!Long}\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\n\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\n\n\nLongPrototype.mod = LongPrototype.modulo;\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\n\nLongPrototype.rem = LongPrototype.modulo;\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @this {!Long}\r\n * @returns {!Long}\r\n */\n\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\n\n\nLongPrototype.and = function and(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\n\n\nLongPrototype.or = function or(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\n\n\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other)) other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\n\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n};\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\n\nLongPrototype.shl = LongPrototype.shiftLeft;\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n};\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\n\nLongPrototype.shr = LongPrototype.shiftRight;\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n};\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\n\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\n\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\r\n * Returns this Long with bits rotated to the left by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\n\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n  }\n\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n};\n/**\r\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\n\n\nLongPrototype.rotl = LongPrototype.rotateLeft;\n/**\r\n * Returns this Long with bits rotated to the right by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\n\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n\n  if (numBits < 32) {\n    b = 32 - numBits;\n    return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n  }\n\n  numBits -= 32;\n  b = 32 - numBits;\n  return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n};\n/**\r\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\n\n\nLongPrototype.rotr = LongPrototype.rotateRight;\n/**\r\n * Converts this Long to signed.\r\n * @this {!Long}\r\n * @returns {!Long} Signed long\r\n */\n\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned) return this;\n  return fromBits(this.low, this.high, false);\n};\n/**\r\n * Converts this Long to unsigned.\r\n * @this {!Long}\r\n * @returns {!Long} Unsigned long\r\n */\n\n\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned) return this;\n  return fromBits(this.low, this.high, true);\n};\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @this {!Long}\r\n * @returns {!Array.<number>} Byte representation\r\n */\n\n\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @this {!Long}\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\n\n\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n      lo = this.low;\n  return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n};\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @this {!Long}\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\n\n\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n      lo = this.low;\n  return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n};\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\n\n\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\n\n\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n};\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\n\n\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n};","map":{"version":3,"names":["module","exports","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","prototype","__isLong__","Object","defineProperty","value","isLong","obj","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","divide","divisor","approx","res","halfThis","shr","shl","toUnsigned","shru","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","b","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/@xtuc/long/src/long.js"],"sourcesContent":["module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @this {!Long}\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @this {!Long}\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @this {!Long}\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @this {!Long}\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @this {!Long}\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @this {!Long}\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @this {!Long}\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @this {!Long}\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @this {!Long}\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @this {!Long}\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @this {!Long}\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @this {!Long}\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @this {!Long}\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm[\"mul\"](this.low,\r\n                              this.high,\r\n                              multiplier.low,\r\n                              multiplier.high);\r\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @this {!Long}\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @this {!Long}\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm[\"get_high\"](), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @this {!Long}\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @this {!Long}\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\r\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\r\n    return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits rotated to the left by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\r\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\r\n    var b;\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\r\n    if (numBits < 32) {\r\n        b = (32 - numBits);\r\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\r\n    }\r\n    numBits -= 32;\r\n    b = (32 - numBits);\r\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\r\n}\r\n/**\r\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\r\nLongPrototype.rotl = LongPrototype.rotateLeft;\r\n\r\n/**\r\n * Returns this Long with bits rotated to the right by the given amount.\r\n * @this {!Long}\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\r\nLongPrototype.rotateRight = function rotateRight(numBits) {\r\n    var b;\r\n    if (isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\r\n    if (numBits < 32) {\r\n        b = (32 - numBits);\r\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\r\n    }\r\n    numBits -= 32;\r\n    b = (32 - numBits);\r\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\r\n}\r\n/**\r\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Rotated Long\r\n */\r\nLongPrototype.rotr = LongPrototype.rotateRight;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @this {!Long}\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @this {!Long}\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @this {!Long}\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @this {!Long}\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @this {!Long}\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AAEA;AACA;AACA;;AACA,IAAIC,IAAI,GAAG,IAAX;;AAEA,IAAI;EACFA,IAAI,GAAG,IAAIC,WAAW,CAACC,QAAhB,CAAyB,IAAID,WAAW,CAACE,MAAhB,CAAuB,IAAIC,UAAJ,CAAe,CACpE,CADoE,EACjE,EADiE,EAC7D,GAD6D,EACxD,GADwD,EACnD,CADmD,EAChD,CADgD,EAC7C,CAD6C,EAC1C,CAD0C,EACvC,CADuC,EACpC,EADoC,EAChC,CADgC,EAC7B,EAD6B,EACzB,CADyB,EACtB,CADsB,EACnB,GADmB,EACd,EADc,EACV,CADU,EACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,CADb,EACgB,GADhB,EACqB,CADrB,EACwB,CADxB,EAC2B,CAD3B,EAC8B,CAD9B,EACiC,CADjC,EACoC,CADpC,EACuC,CADvC,EAC0C,CAD1C,EAC6C,CAD7C,EACgD,CADhD,EACmD,CADnD,EACsD,CADtD,EACyD,GADzD,EAC8D,CAD9D,EACiE,EADjE,EACqE,CADrE,EACwE,EADxE,EAC4E,CAD5E,EAC+E,EAD/E,EACmF,CADnF,EACsF,CADtF,EACyF,GADzF,EAC8F,GAD9F,EACmG,GADnG,EACwG,CADxG,EAC2G,CAD3G,EAC8G,CAD9G,EACiH,GADjH,EACsH,GADtH,EAC2H,GAD3H,EACgI,EADhI,EACoI,GADpI,EACyI,CADzI,EAC4I,CAD5I,EAC+I,CAD/I,EACkJ,GADlJ,EACuJ,GADvJ,EAC4J,GAD5J,EACiK,EADjK,EACqK,GADrK,EAC0K,CAD1K,EAC6K,CAD7K,EACgL,CADhL,EACmL,GADnL,EACwL,GADxL,EAC6L,GAD7L,EACkM,EADlM,EACsM,GADtM,EAC2M,CAD3M,EAC8M,CAD9M,EACiN,CADjN,EACoN,GADpN,EACyN,GADzN,EAC8N,GAD9N,EACmO,EADnO,EACuO,GADvO,EAC4O,CAD5O,EAC+O,CAD/O,EACkP,CADlP,EACqP,GADrP,EAC0P,GAD1P,EAC+P,GAD/P,EACoQ,EADpQ,EACwQ,GADxQ,EAC6Q,GAD7Q,EACkR,GADlR,EACuR,GADvR,EAC4R,CAD5R,EAC+R,CAD/R,EACkS,EADlS,EACsS,GADtS,EAC2S,CAD3S,EAC8S,CAD9S,EACiT,CADjT,EACoT,CADpT,EACuT,EADvT,EAC2T,CAD3T,EAC8T,EAD9T,EACkU,EADlU,EACsU,CADtU,EACyU,CADzU,EAC4U,GAD5U,EACiV,EADjV,EACqV,CADrV,EACwV,GADxV,EAC6V,EAD7V,EACiW,CADjW,EACoW,GADpW,EACyW,EADzW,EAC6W,EAD7W,EACiX,GADjX,EACsX,GADtX,EAC2X,EAD3X,EAC+X,CAD/X,EACkY,GADlY,EACuY,EADvY,EAC2Y,CAD3Y,EAC8Y,GAD9Y,EACmZ,EADnZ,EACuZ,EADvZ,EAC2Z,GAD3Z,EACga,GADha,EACqa,GADra,EAC0a,EAD1a,EAC8a,CAD9a,EACib,EADjb,EACqb,EADrb,EACyb,GADzb,EAC8b,GAD9b,EACmc,EADnc,EACuc,CADvc,EAC0c,EAD1c,EAC8c,CAD9c,EACid,GADjd,EACsd,EADtd,EAC0d,EAD1d,EAC8d,CAD9d,EACie,CADje,EACoe,GADpe,EACye,EADze,EAC6e,CAD7e,EACgf,GADhf,EACqf,EADrf,EACyf,CADzf,EAC4f,GAD5f,EACigB,EADjgB,EACqgB,EADrgB,EACygB,GADzgB,EAC8gB,GAD9gB,EACmhB,EADnhB,EACuhB,CADvhB,EAC0hB,GAD1hB,EAC+hB,EAD/hB,EACmiB,CADniB,EACsiB,GADtiB,EAC2iB,EAD3iB,EAC+iB,EAD/iB,EACmjB,GADnjB,EACwjB,GADxjB,EAC6jB,GAD7jB,EACkkB,EADlkB,EACskB,CADtkB,EACykB,EADzkB,EAC6kB,EAD7kB,EACilB,GADjlB,EACslB,GADtlB,EAC2lB,EAD3lB,EAC+lB,CAD/lB,EACkmB,EADlmB,EACsmB,CADtmB,EACymB,GADzmB,EAC8mB,EAD9mB,EACknB,EADlnB,EACsnB,CADtnB,EACynB,CADznB,EAC4nB,GAD5nB,EACioB,EADjoB,EACqoB,CADroB,EACwoB,GADxoB,EAC6oB,EAD7oB,EACipB,CADjpB,EACopB,GADppB,EACypB,EADzpB,EAC6pB,EAD7pB,EACiqB,GADjqB,EACsqB,GADtqB,EAC2qB,EAD3qB,EAC+qB,CAD/qB,EACkrB,GADlrB,EACurB,EADvrB,EAC2rB,CAD3rB,EAC8rB,GAD9rB,EACmsB,EADnsB,EACusB,EADvsB,EAC2sB,GAD3sB,EACgtB,GADhtB,EACqtB,GADrtB,EAC0tB,EAD1tB,EAC8tB,CAD9tB,EACiuB,EADjuB,EACquB,EADruB,EACyuB,GADzuB,EAC8uB,GAD9uB,EACmvB,EADnvB,EACuvB,CADvvB,EAC0vB,EAD1vB,EAC8vB,CAD9vB,EACiwB,GADjwB,EACswB,EADtwB,EAC0wB,EAD1wB,EAC8wB,CAD9wB,EACixB,CADjxB,EACoxB,GADpxB,EACyxB,EADzxB,EAC6xB,CAD7xB,EACgyB,GADhyB,EACqyB,EADryB,EACyyB,CADzyB,EAC4yB,GAD5yB,EACizB,EADjzB,EACqzB,EADrzB,EACyzB,GADzzB,EAC8zB,GAD9zB,EACm0B,EADn0B,EACu0B,CADv0B,EAC00B,GAD10B,EAC+0B,EAD/0B,EACm1B,CADn1B,EACs1B,GADt1B,EAC21B,EAD31B,EAC+1B,EAD/1B,EACm2B,GADn2B,EACw2B,GADx2B,EAC62B,GAD72B,EACk3B,EADl3B,EACs3B,CADt3B,EACy3B,EADz3B,EAC63B,EAD73B,EACi4B,GADj4B,EACs4B,GADt4B,EAC24B,EAD34B,EAC+4B,CAD/4B,EACk5B,EADl5B,EACs5B,CADt5B,EACy5B,GADz5B,EAC85B,EAD95B,EACk6B,EADl6B,EACs6B,CADt6B,EACy6B,CADz6B,EAC46B,GAD56B,EACi7B,EADj7B,EACq7B,CADr7B,EACw7B,GADx7B,EAC67B,EAD77B,EACi8B,CADj8B,EACo8B,GADp8B,EACy8B,EADz8B,EAC68B,EAD78B,EACi9B,GADj9B,EACs9B,GADt9B,EAC29B,EAD39B,EAC+9B,CAD/9B,EACk+B,GADl+B,EA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"},"metadata":{},"sourceType":"script"}