{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DirectoryExistsPlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {string | ResolveStepHook} target target\r\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const directory = request.path;\n      if (!directory) return callback();\n      fs.stat(directory, (err, stat) => {\n        if (err || !stat) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n          if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n          return callback();\n        }\n\n        if (!stat.isDirectory()) {\n          if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n          if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n          return callback();\n        }\n\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(directory);\n        resolver.doResolve(target, request, `existing directory ${directory}`, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"names":["module","exports","DirectoryExistsPlugin","constructor","source","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","directory","path","stat","err","missingDependencies","add","log","isDirectory","fileDependencies","doResolve"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n\r\nmodule.exports = class DirectoryExistsPlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {string | ResolveStepHook} target target\r\n\t */\r\n\tconstructor(source, target) {\r\n\t\tthis.source = source;\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst target = resolver.ensureHook(this.target);\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\r\n\t\t\t\t\"DirectoryExistsPlugin\",\r\n\t\t\t\t(request, resolveContext, callback) => {\r\n\t\t\t\t\tconst fs = resolver.fileSystem;\r\n\t\t\t\t\tconst directory = request.path;\r\n\t\t\t\t\tif (!directory) return callback();\r\n\t\t\t\t\tfs.stat(directory, (err, stat) => {\r\n\t\t\t\t\t\tif (err || !stat) {\r\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\r\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\r\n\t\t\t\t\t\t\tif (resolveContext.log)\r\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" doesn't exist\");\r\n\t\t\t\t\t\t\treturn callback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!stat.isDirectory()) {\r\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\r\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\r\n\t\t\t\t\t\t\tif (resolveContext.log)\r\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" is not a directory\");\r\n\t\t\t\t\t\t\treturn callback();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\r\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(directory);\r\n\t\t\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t\t\trequest,\r\n\t\t\t\t\t\t\t`existing directory ${directory}`,\r\n\t\t\t\t\t\t\tresolveContext,\r\n\t\t\t\t\t\t\tcallback\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t}\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,qBAAN,CAA4B;EAC5C;AACD;AACA;AACA;EACCC,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACAE,QAAQ,CACNE,OADF,CACU,KAAKL,MADf,EAEEM,QAFF,CAGE,uBAHF,EAIE,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACtC,MAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAApB;MACA,MAAMC,SAAS,GAAGL,OAAO,CAACM,IAA1B;MACA,IAAI,CAACD,SAAL,EAAgB,OAAOH,QAAQ,EAAf;MAChBC,EAAE,CAACI,IAAH,CAAQF,SAAR,EAAmB,CAACG,GAAD,EAAMD,IAAN,KAAe;QACjC,IAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;UACjB,IAAIN,cAAc,CAACQ,mBAAnB,EACCR,cAAc,CAACQ,mBAAf,CAAmCC,GAAnC,CAAuCL,SAAvC;UACD,IAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,gBAA/B;UACD,OAAOH,QAAQ,EAAf;QACA;;QACD,IAAI,CAACK,IAAI,CAACK,WAAL,EAAL,EAAyB;UACxB,IAAIX,cAAc,CAACQ,mBAAnB,EACCR,cAAc,CAACQ,mBAAf,CAAmCC,GAAnC,CAAuCL,SAAvC;UACD,IAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,qBAA/B;UACD,OAAOH,QAAQ,EAAf;QACA;;QACD,IAAID,cAAc,CAACY,gBAAnB,EACCZ,cAAc,CAACY,gBAAf,CAAgCH,GAAhC,CAAoCL,SAApC;QACDT,QAAQ,CAACkB,SAAT,CACCpB,MADD,EAECM,OAFD,EAGE,sBAAqBK,SAAU,EAHjC,EAICJ,cAJD,EAKCC,QALD;MAOA,CAxBD;IAyBA,CAjCH;EAmCA;;AAnD2C,CAA7C"},"metadata":{},"sourceType":"script"}