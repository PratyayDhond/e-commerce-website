{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst getPaths = require(\"./getPaths\");\n\nconst {\n  getType,\n  PathType\n} = require(\"./util/path\");\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n\nmodule.exports = class SymlinkPlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {string | ResolveStepHook} target target\r\n   */\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n      if (request.ignoreSymlinks) return callback();\n      const pathsResult = getPaths(request.path);\n      const pathSegments = pathsResult.segments;\n      const paths = pathsResult.paths;\n      let containsSymlink = false;\n      let idx = -1;\n      forEachBail(paths, (path, callback) => {\n        idx++;\n        if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(path);\n        fs.readlink(path, (err, result) => {\n          if (!err && result) {\n            pathSegments[idx] = result;\n            containsSymlink = true; // Shortcut when absolute symlink found\n\n            const resultType = getType(result.toString());\n\n            if (resultType === PathType.AbsoluteWin || resultType === PathType.AbsolutePosix) {\n              return callback(null, idx);\n            }\n          }\n\n          callback();\n        });\n      }, (err, idx) => {\n        if (!containsSymlink) return callback();\n        const resultSegments = typeof idx === \"number\" ? pathSegments.slice(0, idx + 1) : pathSegments.slice();\n        const result = resultSegments.reduceRight((a, b) => {\n          return resolver.join(a, b);\n        });\n        const obj = { ...request,\n          path: result\n        };\n        resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":{"version":3,"names":["forEachBail","require","getPaths","getType","PathType","module","exports","SymlinkPlugin","constructor","source","target","apply","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","ignoreSymlinks","pathsResult","path","pathSegments","segments","paths","containsSymlink","idx","fileDependencies","add","readlink","err","result","resultType","toString","AbsoluteWin","AbsolutePosix","resultSegments","slice","reduceRight","a","b","join","obj","doResolve"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst forEachBail = require(\"./forEachBail\");\r\nconst getPaths = require(\"./getPaths\");\r\nconst { getType, PathType } = require(\"./util/path\");\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n\r\nmodule.exports = class SymlinkPlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {string | ResolveStepHook} target target\r\n\t */\r\n\tconstructor(source, target) {\r\n\t\tthis.source = source;\r\n\t\tthis.target = target;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tconst target = resolver.ensureHook(this.target);\r\n\t\tconst fs = resolver.fileSystem;\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\r\n\t\t\t\tif (request.ignoreSymlinks) return callback();\r\n\t\t\t\tconst pathsResult = getPaths(request.path);\r\n\t\t\t\tconst pathSegments = pathsResult.segments;\r\n\t\t\t\tconst paths = pathsResult.paths;\r\n\r\n\t\t\t\tlet containsSymlink = false;\r\n\t\t\t\tlet idx = -1;\r\n\t\t\t\tforEachBail(\r\n\t\t\t\t\tpaths,\r\n\t\t\t\t\t(path, callback) => {\r\n\t\t\t\t\t\tidx++;\r\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\r\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(path);\r\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\r\n\t\t\t\t\t\t\tif (!err && result) {\r\n\t\t\t\t\t\t\t\tpathSegments[idx] = result;\r\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\r\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\r\n\t\t\t\t\t\t\t\tconst resultType = getType(result.toString());\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsoluteWin ||\r\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsolutePosix\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcallback();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(err, idx) => {\r\n\t\t\t\t\t\tif (!containsSymlink) return callback();\r\n\t\t\t\t\t\tconst resultSegments =\r\n\t\t\t\t\t\t\ttypeof idx === \"number\"\r\n\t\t\t\t\t\t\t\t? pathSegments.slice(0, idx + 1)\r\n\t\t\t\t\t\t\t\t: pathSegments.slice();\r\n\t\t\t\t\t\tconst result = resultSegments.reduceRight((a, b) => {\r\n\t\t\t\t\t\t\treturn resolver.join(a, b);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tconst obj = {\r\n\t\t\t\t\t\t\t...request,\r\n\t\t\t\t\t\t\tpath: result\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tresolver.doResolve(\r\n\t\t\t\t\t\t\ttarget,\r\n\t\t\t\t\t\t\tobj,\r\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\r\n\t\t\t\t\t\t\tresolveContext,\r\n\t\t\t\t\t\t\tcallback\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t}\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAM;EAAEE,OAAF;EAAWC;AAAX,IAAwBH,OAAO,CAAC,aAAD,CAArC;AAEA;;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,aAAN,CAAoB;EACpC;AACD;AACA;AACA;EACCC,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAT,CAAoB,KAAKH,MAAzB,CAAf;IACA,MAAMI,EAAE,GAAGF,QAAQ,CAACG,UAApB;IACAH,QAAQ,CACNI,OADF,CACU,KAAKP,MADf,EAEEQ,QAFF,CAEW,eAFX,EAE4B,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACjE,IAAIF,OAAO,CAACG,cAAZ,EAA4B,OAAOD,QAAQ,EAAf;MAC5B,MAAME,WAAW,GAAGpB,QAAQ,CAACgB,OAAO,CAACK,IAAT,CAA5B;MACA,MAAMC,YAAY,GAAGF,WAAW,CAACG,QAAjC;MACA,MAAMC,KAAK,GAAGJ,WAAW,CAACI,KAA1B;MAEA,IAAIC,eAAe,GAAG,KAAtB;MACA,IAAIC,GAAG,GAAG,CAAC,CAAX;MACA5B,WAAW,CACV0B,KADU,EAEV,CAACH,IAAD,EAAOH,QAAP,KAAoB;QACnBQ,GAAG;QACH,IAAIT,cAAc,CAACU,gBAAnB,EACCV,cAAc,CAACU,gBAAf,CAAgCC,GAAhC,CAAoCP,IAApC;QACDT,EAAE,CAACiB,QAAH,CAAYR,IAAZ,EAAkB,CAACS,GAAD,EAAMC,MAAN,KAAiB;UAClC,IAAI,CAACD,GAAD,IAAQC,MAAZ,EAAoB;YACnBT,YAAY,CAACI,GAAD,CAAZ,GAAoBK,MAApB;YACAN,eAAe,GAAG,IAAlB,CAFmB,CAGnB;;YACA,MAAMO,UAAU,GAAG/B,OAAO,CAAC8B,MAAM,CAACE,QAAP,EAAD,CAA1B;;YACA,IACCD,UAAU,KAAK9B,QAAQ,CAACgC,WAAxB,IACAF,UAAU,KAAK9B,QAAQ,CAACiC,aAFzB,EAGE;cACD,OAAOjB,QAAQ,CAAC,IAAD,EAAOQ,GAAP,CAAf;YACA;UACD;;UACDR,QAAQ;QACR,CAdD;MAeA,CArBS,EAsBV,CAACY,GAAD,EAAMJ,GAAN,KAAc;QACb,IAAI,CAACD,eAAL,EAAsB,OAAOP,QAAQ,EAAf;QACtB,MAAMkB,cAAc,GACnB,OAAOV,GAAP,KAAe,QAAf,GACGJ,YAAY,CAACe,KAAb,CAAmB,CAAnB,EAAsBX,GAAG,GAAG,CAA5B,CADH,GAEGJ,YAAY,CAACe,KAAb,EAHJ;QAIA,MAAMN,MAAM,GAAGK,cAAc,CAACE,WAAf,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAU;UACnD,OAAO9B,QAAQ,CAAC+B,IAAT,CAAcF,CAAd,EAAiBC,CAAjB,CAAP;QACA,CAFc,CAAf;QAGA,MAAME,GAAG,GAAG,EACX,GAAG1B,OADQ;UAEXK,IAAI,EAAEU;QAFK,CAAZ;QAIArB,QAAQ,CAACiC,SAAT,CACCnC,MADD,EAECkC,GAFD,EAGC,yBAAyBX,MAH1B,EAICd,cAJD,EAKCC,QALD;MAOA,CA1CS,CAAX;IA4CA,CAtDF;EAuDA;;AAxEmC,CAArC"},"metadata":{},"sourceType":"script"}