{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst slashCode = \"/\".charCodeAt(0);\nconst backslashCode = \"\\\\\".charCodeAt(0);\n\nconst isInside = (path, parent) => {\n  if (!path.startsWith(parent)) return false;\n  if (path.length === parent.length) return true;\n  const charCode = path.charCodeAt(parent.length);\n  return charCode === slashCode || charCode === backslashCode;\n};\n\nmodule.exports = class RestrictionsPlugin {\n  /**\r\n   * @param {string | ResolveStepHook} source source\r\n   * @param {Set<string | RegExp>} restrictions restrictions\r\n   */\n  constructor(source, restrictions) {\n    this.source = source;\n    this.restrictions = restrictions;\n  }\n  /**\r\n   * @param {Resolver} resolver the resolver\r\n   * @returns {void}\r\n   */\n\n\n  apply(resolver) {\n    resolver.getHook(this.source).tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\n      if (typeof request.path === \"string\") {\n        const path = request.path;\n\n        for (const rule of this.restrictions) {\n          if (typeof rule === \"string\") {\n            if (!isInside(path, rule)) {\n              if (resolveContext.log) {\n                resolveContext.log(`${path} is not inside of the restriction ${rule}`);\n              }\n\n              return callback(null, null);\n            }\n          } else if (!rule.test(path)) {\n            if (resolveContext.log) {\n              resolveContext.log(`${path} doesn't match the restriction ${rule}`);\n            }\n\n            return callback(null, null);\n          }\n        }\n      }\n\n      callback();\n    });\n  }\n\n};","map":{"version":3,"names":["slashCode","charCodeAt","backslashCode","isInside","path","parent","startsWith","length","charCode","module","exports","RestrictionsPlugin","constructor","source","restrictions","apply","resolver","getHook","tapAsync","request","resolveContext","callback","rule","log","test"],"sources":["W:/Coding/finalProject/e-commerce-website/node_modules/enhanced-resolve/lib/RestrictionsPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"./Resolver\")} Resolver */\r\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\r\n\r\nconst slashCode = \"/\".charCodeAt(0);\r\nconst backslashCode = \"\\\\\".charCodeAt(0);\r\n\r\nconst isInside = (path, parent) => {\r\n\tif (!path.startsWith(parent)) return false;\r\n\tif (path.length === parent.length) return true;\r\n\tconst charCode = path.charCodeAt(parent.length);\r\n\treturn charCode === slashCode || charCode === backslashCode;\r\n};\r\n\r\nmodule.exports = class RestrictionsPlugin {\r\n\t/**\r\n\t * @param {string | ResolveStepHook} source source\r\n\t * @param {Set<string | RegExp>} restrictions restrictions\r\n\t */\r\n\tconstructor(source, restrictions) {\r\n\t\tthis.source = source;\r\n\t\tthis.restrictions = restrictions;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Resolver} resolver the resolver\r\n\t * @returns {void}\r\n\t */\r\n\tapply(resolver) {\r\n\t\tresolver\r\n\t\t\t.getHook(this.source)\r\n\t\t\t.tapAsync(\"RestrictionsPlugin\", (request, resolveContext, callback) => {\r\n\t\t\t\tif (typeof request.path === \"string\") {\r\n\t\t\t\t\tconst path = request.path;\r\n\t\t\t\t\tfor (const rule of this.restrictions) {\r\n\t\t\t\t\t\tif (typeof rule === \"string\") {\r\n\t\t\t\t\t\t\tif (!isInside(path, rule)) {\r\n\t\t\t\t\t\t\t\tif (resolveContext.log) {\r\n\t\t\t\t\t\t\t\t\tresolveContext.log(\r\n\t\t\t\t\t\t\t\t\t\t`${path} is not inside of the restriction ${rule}`\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn callback(null, null);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (!rule.test(path)) {\r\n\t\t\t\t\t\t\tif (resolveContext.log) {\r\n\t\t\t\t\t\t\t\tresolveContext.log(\r\n\t\t\t\t\t\t\t\t\t`${path} doesn't match the restriction ${rule}`\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn callback(null, null);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback();\r\n\t\t\t});\r\n\t}\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAMA,SAAS,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAlB;AACA,MAAMC,aAAa,GAAG,KAAKD,UAAL,CAAgB,CAAhB,CAAtB;;AAEA,MAAME,QAAQ,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;EAClC,IAAI,CAACD,IAAI,CAACE,UAAL,CAAgBD,MAAhB,CAAL,EAA8B,OAAO,KAAP;EAC9B,IAAID,IAAI,CAACG,MAAL,KAAgBF,MAAM,CAACE,MAA3B,EAAmC,OAAO,IAAP;EACnC,MAAMC,QAAQ,GAAGJ,IAAI,CAACH,UAAL,CAAgBI,MAAM,CAACE,MAAvB,CAAjB;EACA,OAAOC,QAAQ,KAAKR,SAAb,IAA0BQ,QAAQ,KAAKN,aAA9C;AACA,CALD;;AAOAO,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;EACzC;AACD;AACA;AACA;EACCC,WAAW,CAACC,MAAD,EAASC,YAAT,EAAuB;IACjC,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACA;EAED;AACD;AACA;AACA;;;EACCC,KAAK,CAACC,QAAD,EAAW;IACfA,QAAQ,CACNC,OADF,CACU,KAAKJ,MADf,EAEEK,QAFF,CAEW,oBAFX,EAEiC,CAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,KAAuC;MACtE,IAAI,OAAOF,OAAO,CAACf,IAAf,KAAwB,QAA5B,EAAsC;QACrC,MAAMA,IAAI,GAAGe,OAAO,CAACf,IAArB;;QACA,KAAK,MAAMkB,IAAX,IAAmB,KAAKR,YAAxB,EAAsC;UACrC,IAAI,OAAOQ,IAAP,KAAgB,QAApB,EAA8B;YAC7B,IAAI,CAACnB,QAAQ,CAACC,IAAD,EAAOkB,IAAP,CAAb,EAA2B;cAC1B,IAAIF,cAAc,CAACG,GAAnB,EAAwB;gBACvBH,cAAc,CAACG,GAAf,CACE,GAAEnB,IAAK,qCAAoCkB,IAAK,EADlD;cAGA;;cACD,OAAOD,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;YACA;UACD,CATD,MASO,IAAI,CAACC,IAAI,CAACE,IAAL,CAAUpB,IAAV,CAAL,EAAsB;YAC5B,IAAIgB,cAAc,CAACG,GAAnB,EAAwB;cACvBH,cAAc,CAACG,GAAf,CACE,GAAEnB,IAAK,kCAAiCkB,IAAK,EAD/C;YAGA;;YACD,OAAOD,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;UACA;QACD;MACD;;MAEDA,QAAQ;IACR,CA3BF;EA4BA;;AA3CwC,CAA1C"},"metadata":{},"sourceType":"script"}